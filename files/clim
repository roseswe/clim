#!/bin/bash
set +x
test -f ~/.clim && source ~/.clim
OPTINT=1
options=""
verbose=0
notify=0
function notify {
if [ $notify -eq 1 ]
        then
         curl -s \
  --form-string "token=$push_token" \
  --form-string "user=$push_user" \
  --form-string "message=$1" \
  --form-string "device=$push_device" \
  --form-string "title=$push_title" \
   $push_URL >/dev/null
fi
}

#Set default varables
[[ -z ${ARDANA_USER+x} ]] && ARDANA_USER="ardana"

# Check if executed as ARDANA_USER, if not exit script
if [[ "$(whoami)" != "$ARDANA_USER" ]]; then
	printf "This script must be executed as user '$ARDANA_USER'\n" 1>&2
	exit 1
fi


while getopts "ch?no:l:" opt; do
   case "$opt" in
   h|\?)
     cat <<EOF
clim is a wrapper for the asible based cloud lifecycle manager used in SUSE OpenStack Cloud 8. It will call the ansible playbooks in the correct directory and combines some steps to simplify the installation. It starts long running tasks inside of a screen session - which will not break a job due to a session disconnect. There is also an option to sent a pushover notification to a mobile, after the taks is done (www.pushover.net).
HELP:
  -c                                   :run config-processor with option "-e remove_deleted_servers=True -e free_unused_addresses=True"
  -o "<OPTIONS>"                       :add <OPTIONS> to the end of the ansible-playbook call
  -l "<RESOURCE>"                      :if the service command is used, limit the execution to the resource <RESOURCE> (= --limit <RESOURCE>
  -n notify via pushover	       : Pushover is a service to push notifications to a mobile (other clients are possible). The credentials for the service
                                         have to be configured in ~/.clim  

COMMANDS
  prepare "MESSAGE"                    : commits the config changes, run the config-processor and run the ready-deployment if the config is valid
  site                                 : deploys the config to the nodes via the site.yml playbook. It will stop if there are uncommited changes in the input model
  status	                       : checks the status of the services. Use "-l <RESOURCE>" to get the status only for <RESOURCE>
  stop		                       : shutdown the openstack services. Use "-l <RESOURCE>" to stop the service only for <RESOURCE>
  start		                       : start the openstack services. Use "-l <RESOURCE>" to start the services only for <RESOURCE>
  reboot <RESOURCE>		       : reboot the node <RESOURCE> gracefully (stop the services, reboot the node and start the services again)

  service <OPENSTACK-SERVICE> <ACTION> : runs the ansible playbook to execute <ACTION> on the service <OPENSTACK>
                                         e.x.: "clim service neutron restart". Use "-l <RESOURCE>" to start the acttion only on <RESOURCE>
  service list                         : list all services
  cobbler-deploy		       : executes the cobbler-deploy playbook
  prepare-sles-grub2i <NODES>          : prepare the pxe install environemnet for <NODE> - executes the prepare-sles-grub2 runbook for <RESOURCE>
  bm-reimage <NODES>                   : reinstall the node <NODE> (or <NODE1,NODE2,NODE3) via cobbler
  bm-power-status <NODES>	       : show the power status of <NODE>
  wipe-disks <NODES>                   : Wipe the disks of <NODES>
  
  update-node <RECOURCE>	       : updates a node: apply all patches, update ardana and show the update-status of the node. 
                                         Patches which need a reboot are included, but the node will not rebooted automatically.

  show_nic_mapping <IP>		       : displays the NIC mappings of the server in a template format, which can be used to add a new mappings to  nic_mappings.yml
  
  setup_bashrc	                       : crates a .bashrc file and setup variables which can be used as a shortcut for jumping in the correct directory:
                                          - \$def=~/openstack/my_cloud/definition
                                          - \$data=~/openstack/my_cloud/definition/data
                                          - \$scratch=~/scratch/ansible/next/ardana/ansible
					  - \$config=~/openstack/my_cloud/config
                                            to jump into the DATA directory of the input model, just run "cd \$data"

EOF
     exit 0
   ;;
   v)
     verbose=1
   ;;
   c)
     options="-e remove_deleted_servers=True -e free_unused_addresses=True"
   ;;
   o)
     options="$options $OPTARG"
   ;;
   l)
     options="$options --limit $OPTARG"
   ;;


   n)
     notify=1
   ;;
  esac
done

shift $(($OPTIND - 1))

[ "$1" = "--" ] && shift



case "$1" in
	prepare)
	  cd ~/openstack/ardana/ansible || exit
          if [ -z "$2" ]
	     then
               echo "git commit message is missing: clim prepare \"MESSAGE\" "
               exit 3
          fi
          git add -A
	  git commit -m "$2"
          ansible-playbook -i hosts/localhost config-processor-run.yml $options
          if [ $? -ne 0 ]
                then
                 echo ### ERROR: config-processor is not happy
                 exit 2
          fi
          echo ###########################################################################################################
          echo ###########################################################################################################
          echo ###########################################################################################################

          ansible-playbook -i hosts/localhost ready-deployment.yml
	  ;;


        site)
	  cd ~/openstack/ardana/ansible || exit
          g_stat=`git status --porcelain`
          if [ -n "$g_stat" ]
                then
                 echo "there are changes in the input model:"
                 echo $g_stat
                 echo "run \"prepare\" first"
                 exit 2
          fi
	  cd ~/scratch/ansible/next/ardana/ansible || exit
          screen ansible-playbook -i hosts/verb_hosts site.yml $options
	  ;;

        start)
          cd ~/scratch/ansible/next/ardana/ansible || exit
          ansible-playbook -i hosts/verb_hosts ardana-start.yml $options
          ;;

        stop)
          cd ~/scratch/ansible/next/ardana/ansible || exit
          ansible-playbook -i hosts/verb_hosts ardana-stop.yml $options
          ;;

        status)
          cd ~/scratch/ansible/next/ardana/ansible || exit
          ansible-playbook -i hosts/verb_hosts ardana-status.yml $options
          ;;

        reboot)
          cd ~/scratch/ansible/next/ardana/ansible || exit
          nodes=""
          if [ ! -z $2 ]
              then
                 nodes="--limit $2"
	      else
                echo "ERROR: node name is missing: clim reboot <RESOURCE>"
                exit 1
          fi
          ansible-playbook -i hosts/verb_hosts ardana-reboot.yml $nodes
          ;;

        service)
          if [ "$3" == "list" ]
	       then
               echo "SERVICES:"
	       cd  ~/scratch/ansible/next/ardana/ansible || exit
                ls *.yml | grep '^[a-z]' | grep "start\|stop\|restart\|status" | cut -d "-" -f 1 | sort -u
          else
          if [ -z "$3" ] || [ -z "$2" ]
		then
		 echo "clim service <ACTION> <SERVICE>"
		 exit
          fi
          acmd="${3}-${2}.yml"
          cd ~/scratch/ansible/next/ardana/ansible || exit
          if [ ! -f /var/lib/ardana/scratch/ansible/next/ardana/ansible/$acmd ]
	     then
               echo "service and/or action not found - no valid ansible playbook found"
               exit 5
             fi
          ansible-playbook -i hosts/verb_hosts $acmd $options
          fi
          ;;
        cobbler-deploy)
              cd ~/openstack/ardana/ansible || exit
              ansible-playbook -i hosts/localhost cobbler-deploy.yml
	;;
      
        prepare-sles-grub2)
              nodes=""
              if [ ! -z $2 ]
                  then
                   nodes="-e nodelist=$2"
	      fi
              cd ~/openstack/ardana/ansible || exit
                       
              ansible-playbook -i hosts/localhost prepare-sles-grub2.yml $nodes
	;;
        bm-reimage)
	      cd ~/openstack/ardana/ansible || exit
              nodes=""
              if [ ! -z $2 ]
                  then
                   nodes="-e nodelist=$2"
                  else
                   echo "<RESOURCE> is missing !"
                   exit 1
	      fi
              ansible-playbook -i hosts/localhost bm-reimage.yml $nodes
	 ;;
         bm-power-status)
              cd ~/openstack/ardana/ansible || exit
              nodes=""
              if [ ! -z $2 ]
                  then
                   nodes="-e nodelist=$2"
              fi
              ansible-playbook -i hosts/localhost bm-power-status.yml $nodes |  grep -A 1000 ipmi_connectivity.power | grep -A 2 ^ok
         ;;
        wipe-disks)
              cd ~/scratch/ansible/next/ardana/ansible || exit
              nodes=""
              if [ ! -z $2 ]
                  then
                   nodes="--limit $2"
                  else
                   echo "<NODES> missing: run clim wipe-disks <NODES>"
                   exit 1
              fi
              ansible-playbook -i hosts/localhost wipe_disks.yml $nodes
         ;;
        show_nic_mapping)
              if [ -z $2 ]
                 then
                   echo "clim show_nic_mapping <SERVERNAME>"
                   exit 1
              fi
              ping -c 1 $2 >>/dev/null
              if [ $? -ne 0 ]
		  then
                    echo ERROR: Server not online ...
                    exit 1
              fi
              echo "    - name: <CHANGE>"
              echo "      physical-ports:"
              for i in `ssh $2 "ls /sys/class/net/ -l | grep pci | cut -d / -f 5,8"`
                 do
                  bus=`echo $i | cut -d / -f1`
                  net=`echo $i | cut -d / -f 2`
                  cat <<EOF
        - logical-name: $net
          type: simple-port
          bus-address: "$bus"

EOF
              done
          ;;

       update-node)
              if [ -z $2 ]
                 then
                   echo "SERVER Name missing"
                   exit 1
              fi
          cd ~/scratch/ansible/next/ardana/ansible
          ansible-playbook -i hosts/verb_hosts ardana-update-pkgs.yml -e zypper_update_include_reboot_patches=true --limit $2
          if [ $? -ne 0 ]
                then
                  echo "ERROR"
                  notify "CLIM: update-pkgs failed"
                  exit 2
          fi
          ansible-playbook -i hosts/verb_hosts ardana-update.yml --limit $2
          if [ $? -ne 0 ]
                then
                  echo "ERROR"
                  notify "CLIM: ardana-update failed"
                  exit 2
          fi
          ansible-playbook -i hosts/verb_hosts ardana-update-status.yml --limit $2
          ;;


        test)
          echo This is only a test...
          echo DEBUG: $options $2 $3
          ;;

        setup_bashrc)
	  cat <<EOF >> /var/lib/ardana/.bashrc
# added by clim
export def=~/openstack/my_cloud/definition
export data=~/openstack/my_cloud/definition/data
export config=~/openstack/my_cloud/config
export scratch=~/scratch/ansible/next/ardana/ansible 
EOF
	  ;;
   	*)
          echo $"Usage: $0 cd_myconfig "
	  exit 1
esac
notify "CLIM has finieshd"


